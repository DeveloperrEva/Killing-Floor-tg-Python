import re
import logging
import sqlite3
from datetime import date
from aiogram.dispatcher import FSMContext
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import db as db
import servers as srv
import players as pl
import config
from filters import IsAdmin

conn = sqlite3.connect('database.db')
cursor = conn.cursor()
today = date.today()
logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()
bot = Bot(token=config.TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)

class Mail(StatesGroup):
    photo = State()
    description = State()

class Send(StatesGroup):
    video = State()
    description = State()

inline_btn = InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='kf')
back = InlineKeyboardMarkup().add(inline_btn)

# –°—Ç–∞—Ä—Ç

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    db.join(
        chat_id=message.from_user.id,
        username=message.from_user.username,
        firstname=message.from_user.first_name,
        date=today
    )

    markup = InlineKeyboardMarkup(row_width=2)
    item1 = InlineKeyboardButton("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="kf")
    markup.add(item1)

    full_message = f'<b>üôãüèª‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ KF Sunrise Project</b>'
    
    full_message_admin = f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ -> @{message.from_user.username} ->{message.from_user.id}</b>'

    await bot.send_message(
        message.from_user.id,
        full_message,
        reply_markup=markup
    )

    await bot.send_message(
        config.admin_logs,
        full_message_admin,
    )

@dp.callback_query_handler(lambda c: c.data == "kf")
async def servers(callback_query: types.CallbackQuery):
    markup = InlineKeyboardMarkup(row_width=2)
    item1 = InlineKeyboardButton("KF-Masters", callback_data="masters")
    item2 = InlineKeyboardButton("KF-HzD", callback_data="hzd")
    item3 = InlineKeyboardButton("KF-Massacre", callback_data="massacre")
    markup.add(item1, item2, item3)

    await callback_query.message.edit_text(
        text=f'<b>üåê –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä...</b>',
        reply_markup=markup
        )
    
@dp.callback_query_handler(lambda c: c.data == "masters")
async def masters(callback_query: types.CallbackQuery):
    markup = InlineKeyboardMarkup(row_width=1)
    item1 = InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤", callback_data="players_masters")
    item2 = InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='kf')
    markup.add(item1, item2)
    
    data = await srv.get_server_info_masters()
    
    ip = data['result']['address']
    maps = data['result']['map']['name']
    status = data['result']['status']
    online = data['result']['players']['now']
    online_max = data['result']['players']['max']
    
    if status == 1:
        status = '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç'
    else:
        status = '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'

    matches = re.findall(r"[A-Z].*", maps)
    if matches:
        replace = matches[0]

    await callback_query.message.edit_text(
        text=f'üßü‚Äç‚ôÄÔ∏è –°–µ—Ä–≤–µ—Ä KF-Masters\n\n,'
             f'üåê IP-–ê–¥—Ä–µ—Å: <b>{ip}</b>\n\n'
             f'üí† –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: <b>{status}</b>\n\n'
             f'üÉè –ö–∞—Ä—Ç–∞: <b>{replace}\n\n</b>'
             f'üë§–ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: <b>{online}/{online_max}</b>\n\n',
        reply_markup=markup
    )
    
@dp.callback_query_handler(lambda c: c.data == "hzd")
async def hzd(callback_query: types.CallbackQuery):
    markup = InlineKeyboardMarkup(row_width=1)
    item1 = InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤", callback_data="players_hzd")
    item2 = InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='kf')
    markup.add(item1, item2)
    
    data = await srv.get_server_info_hzd()
    
    ip = data['result']['address']
    maps = data['result']['map']['name']
    status = data['result']['status']
    online = data['result']['players']['now']
    online_max = data['result']['players']['max']
    
    if status == 1:
        status = '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç'
    else:
        status = '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'

    matches = re.findall(r"[A-Z].*", maps)
    if matches:
        replace = matches[0]

    await callback_query.message.edit_text(
        text=f'üßü‚Äç‚ôÄÔ∏è –°–µ—Ä–≤–µ—Ä KF-HzD\n\n,'
             f'üåê IP-–ê–¥—Ä–µ—Å: <b>{ip}</b>\n\n'
             f'üí† –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: <b>{status}</b>\n\n'
             f'üÉè –ö–∞—Ä—Ç–∞: <b>{replace}\n\n</b>'
             f'üë§–ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: <b>{online}/{online_max}</b>\n\n',
        reply_markup=markup
    )
    
@dp.callback_query_handler(lambda c: c.data == "massacre")
async def massacre(callback_query: types.CallbackQuery):
    markup = InlineKeyboardMarkup(row_width=1)
    item1 = InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤", callback_data="players_massacre")
    item2 = InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='kf')
    markup.add(item1, item2)
    
    data = await srv.get_server_info_massacre()
    
    ip = data['result']['address']
    maps = data['result']['map']['name']
    status = data['result']['status']
    online = data['result']['players']['now']
    online_max = data['result']['players']['max']
    
    if status == 1:
        status = '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç'
    else:
        status = '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'

    matches = re.findall(r"[A-Z].*", maps)
    if matches:
        replace = matches[0]

    await callback_query.message.edit_text(
        text=f'üßü‚Äç‚ôÄÔ∏è –°–µ—Ä–≤–µ—Ä KF-Massacre\n\n,'
             f'üåê IP-–ê–¥—Ä–µ—Å: <b>{ip}</b>\n\n'
             f'üí† –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: <b>{status}</b>\n\n'
             f'üÉè –ö–∞—Ä—Ç–∞: <b>{replace}\n\n</b>'
             f'üë§–ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: <b>{online}/{online_max}</b>\n\n',
        reply_markup=markup
    )

# –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤

@dp.callback_query_handler(lambda c: c.data == "players_masters")
async def masters(callback_query: types.CallbackQuery):
    markup = InlineKeyboardMarkup(row_width=1)
    item2 = InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='kf')
    markup.add(item2)

    server_players = await pl.get_server_player_masters()

    arr = []
    for player in server_players['result']:
        name = arr.append(player["name"])
        players = "\n".join(arr)

        await callback_query.message.edit_text(
        text=f'üßü‚Äç‚ôÄÔ∏è –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ KF-Masters\n\n'
             f'üåê –ò–≥—Ä–æ–∫–∏:\n\n'
             f'<b>{players}</b>\n\n',
        reply_markup=markup
    )

@dp.callback_query_handler(lambda c: c.data == "players_hzd")
async def hzd(callback_query: types.CallbackQuery):
    markup = InlineKeyboardMarkup(row_width=1)
    item2 = InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='kf')
    markup.add(item2)

    server_players = await pl.get_server_player_hzd()


    arr = []
    for player in server_players['result']:
        name = arr.append(player["name"])
        players = "\n".join(arr)

    await callback_query.message.edit_text(
        text=f'üßü‚Äç‚ôÄÔ∏è –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ KF-HzD\n\n'
             f'üåê –ò–≥—Ä–æ–∫–∏:\n\n'
             f'<b>{players}</b>\n\n',
        reply_markup=markup
    )

@dp.callback_query_handler(lambda c: c.data == "players_massacre")
async def massacre(callback_query: types.CallbackQuery):
    markup = InlineKeyboardMarkup(row_width=1)
    item2 = InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='kf')
    markup.add(item2)

    server_players = await pl.get_server_player_masters()
    
    arr = []
    for player in server_players['result']:
        name = arr.append(player["name"])
        players = "\n".join(arr)

        await callback_query.message.edit_text(
        text=f'üßü‚Äç‚ôÄÔ∏è –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ KF-Massacre\n\n'
             f'üåê –ò–≥—Ä–æ–∫–∏:\n\n'
             f'<b>{players}</b>\n\n',
        reply_markup=markup
    )

# –ê–¥–º–∏–Ω–∫–∞

@dp.message_handler(IsAdmin(), commands=['admin'], state="*")
async def admin(message: types.Message, state: FSMContext):
    markup = InlineKeyboardMarkup(row_width=2)
    item1 = InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    item2 = InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞", callback_data="send_all")
    item3 = InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞ (—Å –≤–∏–¥–µ–æ)", callback_data="send_all_video")
    markup.add(item1, item2, item3)

    full_message = f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:'

    await bot.send_message(
        message.from_user.id,
        full_message,
        reply_markup=markup
    )

@dp.callback_query_handler(lambda c: c.data == "stats")
async def get_stats(callback_query: types.CallbackQuery):
    all_user, day_user = db.all_users()
    await bot.send_message(
        callback_query.message.chat.id,
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {all_user}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {day_user}"
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == "send_all")
async def mail(callback_query: types.CallbackQuery):
        await Mail.photo.set()
        await callback_query.message.answer('''<b>üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∏

<i>–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ "-"</i></b>''')

@dp.message_handler(content_types=['photo'], state=Mail.photo)
async def mail2(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            try:
                data['photo'] = message.photo[0].file_id
            except:
                data['photo'] = None

        await Mail.next()
        await message.answer('''<b>‚úâÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏

<i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ "HTML"</i></b>''')

@dp.message_handler(state=Mail.photo)
async def mail2(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            try:
                data['photo'] = message.photo[0].file_id
            except:
                data['photo'] = None
        await Mail.next()
        await message.answer('''<b>‚úâÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏

<i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ "HTML"</i></b>''')

@dp.message_handler(state=Mail.description)
async def mail3(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['description'] = message.text
            g, e = 0, 0
            for user in db.all_users_send():
                try:
                    await bot.send_photo(user[0], data['photo'], data['description'], parse_mode='html')
                    g += 1
                except:
                    try:
                        await bot.send_message(user[0], data['description'], parse_mode='html')
                        g += 1
                    except:
                        e += 1

        await state.finish()
        await message.answer(f'''<b>‚è± –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!

üëç –ü–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>{g}</code>
<b>üëé –ù–µ –ø–æ–ª—É—á–∏–ª–∏:</b> <code>{e}</code>''')

@dp.callback_query_handler(lambda c: c.data == "send_all_video")
async def video(callback_query: types.CallbackQuery):
        await Send.video.set()
        await callback_query.message.answer('''<b>üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ</b>''')

@dp.message_handler(content_types=['video'], state=Send.video)
async def video2(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['video'] = message.video[0].file_id
        await Send.next()
        await message.answer('''<b>‚úâÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏

<i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ "HTML"</i></b>''')

@dp.message_handler(state=Send.video)
async def video2(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['video'] = message.video[0].file_id
        await Send.next()
        await message.answer('''<b>‚úâÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏

<i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ "HTML"</i></b>''')

@dp.message_handler(state=Send.description)
async def video3(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['description'] = message.text
            g, e = 0, 0
            for user in db.all_users_send():
                await bot.send_video(user[0], data['video'], data['description'], parse_mode='html')
                g += 1

        await state.finish()
        await message.answer(f'''<b>‚è± –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!

üëç –ü–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>{g}</code>
<b>üëé –ù–µ –ø–æ–ª—É—á–∏–ª–∏:</b> <code>{e}</code>''')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)